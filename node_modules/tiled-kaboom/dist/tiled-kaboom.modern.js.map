{"version":3,"file":"tiled-kaboom.modern.js","sources":["../tiled-kaboom.js"],"sourcesContent":["/* global atob */\n// big array of characters that are suitable for maps\n// TODO: I got annoyed after 3001\nconst mapsymbols = [...new Array(4052)].reduce((a, v, c) => {\n  if ([\n    92,\n    173,\n    847,\n    888,\n    889,\n    907,\n    909,\n    930,\n    1328,\n    1367,\n    1368,\n    1376,\n    1416,\n    1419,\n    1420,\n    1421,\n    1424,\n    1565,\n    1867,\n    1868,\n    2081,\n    2082,\n    2094,\n    2095,\n    2111,\n    2140,\n    2141,\n    2445,\n    2446,\n    2449,\n    2450,\n    2473,\n    2481,\n    2490,\n    2491,\n    2501,\n    2502,\n    2505,\n    2506,\n    2526,\n    2532,\n    2533,\n    2564,\n    2577,\n    2578,\n    2601,\n    2609,\n    2612,\n    2615,\n    2618,\n    2619,\n    2621,\n    2633,\n    2634,\n    2638,\n    2639,\n    2640,\n    2653,\n    2692,\n    2702,\n    2706,\n    2729,\n    2737,\n    2740,\n    2746,\n    2747,\n    2758,\n    2762,\n    2766,\n    2767,\n    2788,\n    2789,\n    2820,\n    2829,\n    2830,\n    2833,\n    2834,\n    2857,\n    2865,\n    2868,\n    2874,\n    2875,\n    2885,\n    2886,\n    2889,\n    2890,\n    2910,\n    2916,\n    2917,\n    2948,\n    2955,\n    2956,\n    2957,\n    2961,\n    2966,\n    2967,\n    2968,\n    2971,\n    2973,\n    2976,\n    2977,\n    2978,\n    2981,\n    2982,\n    2983,\n    2987,\n    2988,\n    2989\n\n  ].includes(c)) {\n    return a\n  }\n\n  if (c < 33) {\n    return a\n  }\n\n  const ranges = [\n    [126, 161],\n    [895, 900],\n    [1479, 1488],\n    [1514, 1520],\n    [1524, 1536],\n    [1969, 1984],\n    [2042, 2048],\n    [2142, 2207],\n    [2238, 2260],\n    [2384, 2389],\n    [2482, 2486],\n    [2510, 2519],\n    [2519, 2524],\n    [2555, 2561],\n    [2570, 2575],\n    [2626, 2631],\n    [2641, 2649],\n    [2654, 2662],\n    [2677, 2689],\n    [2768, 2784],\n    [2801, 2809],\n    [2809, 2817],\n    [2893, 2902],\n    [2903, 2908],\n    [2935, 2946]\n  ]\n\n  for (const r of ranges) {\n    if (c > r[0] && c < r[1]) {\n      return a\n    }\n  }\n\n  return [...a, String.fromCharCode(c)]\n}, [])\n\nfunction verifyTiledMap (mapObj) {\n  // TODO: add more validation here\n  if (!mapObj) {\n    throw new Error('Map parameter is required.')\n  }\n\n  if (mapObj.orientation !== 'orthogonal') {\n    throw new Error(`Map is ${mapObj.orientation}. Only orthogonal is currently supported.`)\n  }\n  if (mapObj.renderorder !== 'right-down') {\n    throw new Error(`Map is ${mapObj.renderorder}. Only right-down is currently supported.`)\n  }\n}\n\n// decode data in Tiled base64 format\nfunction base64Decode (data) {\n  const len = data.length\n  const bytes = new Array(len / 4)\n\n  // Interpret data as an array of bytes representing little-endian encoded uint32 values.\n  for (let i = 0; i < len; i += 4) {\n    bytes[i / 4] = (\n      data.charCodeAt(i) |\n            data.charCodeAt(i + 1) << 8 |\n            data.charCodeAt(i + 2) << 16 |\n            data.charCodeAt(i + 3) << 24\n    ) >>> 0\n  }\n\n  return bytes\n}\n\nexport default (k) => {\n  // this will be imported if needed for compressed layers\n  let pako = window.pako\n\n  return {\n    verifyTiledMap,\n\n    async loadTiledMap (mapObj, location = '') {\n      // support string=URL\n      if (typeof mapObj === 'string') {\n        mapObj = await fetch(mapObj).then(r => r.json())\n      }\n\n      verifyTiledMap(mapObj)\n\n      const map = {\n        sprites: [],\n        levels: [],\n        key: {}\n      }\n\n      for (const tileset of mapObj.tilesets) {\n        if (tileset.margin !== 0) {\n          console.error(`${tileset.name} uses margins. That is currently unsupported. Skipping.`)\n          continue\n        }\n        if (tileset.spacing !== 0) {\n          console.error(`${tileset.name} uses spacing. That is currently unsupported. Skipping.`)\n          continue\n        }\n\n        const sliceX = tileset.imagewidth / tileset.tilewidth\n        const sliceY = tileset.imageheight / tileset.tileheight\n        if (tileset.image) {\n          map.sprites.push(await k.loadSprite(tileset.name, `${location}${tileset.image}`, { sliceX, sliceY }))\n        }\n        for (let frame = tileset.firstgid; frame < (tileset.firstgid + tileset.tilecount); frame++) {\n          map.key[mapsymbols[frame]] = () => [k.sprite(tileset.name, { frame: frame - 1 })]\n        }\n      }\n\n      for (const layer of mapObj.layers) {\n        if (layer.type === 'tilelayer' && layer.visible) {\n          const { width, height } = layer\n\n          if (layer.encoding === 'base64') {\n            if (!layer.compression || layer.compression === '') {\n              layer.data = base64Decode(atob(layer.data))\n            } else {\n              if (typeof pako === 'undefined') {\n                pako = await import('pako')\n              }\n              const d = Uint8Array.from(atob(layer.data).split('').map(c => c.charCodeAt(0)))\n              layer.data = base64Decode(String.fromCharCode(...pako.inflate(d)))\n            }\n          }\n\n          const mapArray = [...new Array(height)].map(() => (new Array(width + 1).fill(' ')))\n          for (let x = 0; x < width; x++) {\n            for (let y = 0; y < height; y++) {\n              const cell = (y * width) + x\n              if (layer.data[cell] !== 0) {\n                mapArray[y][x] = mapsymbols[layer.data[cell]]\n              }\n            }\n          }\n          map.levels.push(mapArray.map(l => l.join('')))\n        }\n      }\n\n      map.mapObj = mapObj\n\n      return map\n    }\n  }\n}\n"],"names":["mapsymbols","Array","reduce","a","v","c","includes","ranges","r","String","fromCharCode","verifyTiledMap","mapObj","Error","orientation","renderorder","base64Decode","data","len","length","bytes","i","charCodeAt","k","pako","window","loadTiledMap","location","fetch","then","json","map","sprites","levels","key","tileset","tilesets","margin","console","error","name","spacing","sliceX","imagewidth","tilewidth","sliceY","imageheight","tileheight","image","push","loadSprite","frame","firstgid","tilecount","sprite","layer","layers","type","visible","width","height","encoding","compression","d","Uint8Array","from","atob","split","inflate","mapArray","fill","x","y","cell","l","join"],"mappings":"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"}